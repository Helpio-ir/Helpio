@model Helpio.Ir.Domain.Entities.Ticketing.Ticket
@{
    ViewData["Title"] = "جزئیات تیکت";
}

<div class="row">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">تیکت #@Model.Id - @Model.Title</h3>
                <div class="card-tools">
                    @if (ViewBag.IsAdmin == true || ViewBag.IsManager == true || 
                         (ViewBag.IsAgent == true && Model.SupportAgentId == ViewBag.CurrentUserId))
                    {
                        <div class="btn-group">
                            <button type="button" class="btn btn-primary btn-sm dropdown-toggle" data-bs-toggle="dropdown">
                                <i class="bi bi-gear"></i> عملیات
                            </button>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" href="#"><i class="bi bi-pencil"></i> ویرایش</a></li>
                                <li><a class="dropdown-item" href="#"><i class="bi bi-check-circle"></i> بستن تیکت</a></li>
                                <li><a class="dropdown-item" href="#"><i class="bi bi-arrow-clockwise"></i> بازگشایی</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item text-danger" href="#"><i class="bi bi-trash"></i> حذف</a></li>
                            </ul>
                        </div>
                    }
                    <a asp-action="Index" class="btn btn-secondary btn-sm">
                        <i class="bi bi-arrow-left"></i> بازگشت
                    </a>
                </div>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <table class="table table-borderless">
                            <tr>
                                <th>عنوان:</th>
                                <td>@Model.Title</td>
                            </tr>
                            <tr>
                                <th>مشتری:</th>
                                <td>
                                    @if (Model.Customer != null)
                                    {
                                        <a asp-controller="Customers" asp-action="Details" asp-route-id="@Model.CustomerId">
                                            @Model.Customer.FirstName @Model.Customer.LastName
                                        </a>
                                    }
                                </td>
                            </tr>
                            <tr>
                                <th>وضعیت:</th>
                                <td>
                                    <span class="badge bg-@(Model.TicketState.Name == "Open" ? "warning" : Model.TicketState.Name == "Closed" ? "success" : "primary")">
                                        @Model.TicketState.Name
                                    </span>
                                </td>
                            </tr>
                            <tr>
                                <th>اولویت:</th>
                                <td>
                                    <span class="badge bg-@(Model.Priority == Helpio.Ir.Domain.Entities.Ticketing.TicketPriority.Critical ? "danger" : 
                                                            Model.Priority == Helpio.Ir.Domain.Entities.Ticketing.TicketPriority.High ? "warning" : 
                                                            Model.Priority == Helpio.Ir.Domain.Entities.Ticketing.TicketPriority.Normal ? "primary" : "secondary")">
                                        @(Model.Priority == Helpio.Ir.Domain.Entities.Ticketing.TicketPriority.Critical ? "بحرانی" :
                                          Model.Priority == Helpio.Ir.Domain.Entities.Ticketing.TicketPriority.High ? "بالا" :
                                          Model.Priority == Helpio.Ir.Domain.Entities.Ticketing.TicketPriority.Normal ? "عادی" : "کم")
                                    </span>
                                </td>
                            </tr>
                            <tr>
                                <th>دسته‌بندی:</th>
                                <td>@Model.TicketCategory.Name</td>
                            </tr>
                        </table>
                    </div>
                    <div class="col-md-6">
                        <table class="table table-borderless">
                            <tr>
                                <th>کارشناس:</th>
                                <td>
                                    @if (Model.SupportAgent?.User != null)
                                    {
                                        @Model.SupportAgent.User.FirstName @Model.SupportAgent.User.LastName
                                    }
                                    else
                                    {
                                        <span class="text-muted">تخصیص داده نشده</span>
                                        @if (ViewBag.IsAgent == true)
                                        {
                                            <form asp-action="AssignToMe" asp-route-id="@Model.Id" method="post" class="d-inline">
                                                <button type="submit" class="btn btn-sm btn-outline-primary ms-2">
                                                    اختصاص به من
                                                </button>
                                            </form>
                                        }
                                    }
                                </td>
                            </tr>
                            <tr>
                                <th>تیم:</th>
                                <td>
                                    @if (Model.Team != null)
                                    {
                                        <a asp-controller="Teams" asp-action="Details" asp-route-id="@Model.TeamId">
                                            @Model.Team.Name
                                        </a>
                                    }
                                </td>
                            </tr>
                            <tr>
                                <th>تاریخ ایجاد:</th>
                                <td>@Model.CreatedAt.ToString("yyyy/MM/dd HH:mm")</td>
                            </tr>
                            @if (Model.DueDate.HasValue)
                            {
                                <tr>
                                    <th>تاریخ مقرر:</th>
                                    <td>
                                        @Model.DueDate.Value.ToString("yyyy/MM/dd HH:mm")
                                        @if (Model.DueDate.Value < DateTime.Now)
                                        {
                                            <span class="badge bg-danger ms-2">گذشته</span>
                                        }
                                    </td>
                                </tr>
                            }
                            @if (Model.ResolvedDate.HasValue)
                            {
                                <tr>
                                    <th>تاریخ حل:</th>
                                    <td>@Model.ResolvedDate.Value.ToString("yyyy/MM/dd HH:mm")</td>
                                </tr>
                            }
                        </table>
                    </div>
                </div>
                
                <div class="row mt-4">
                    <div class="col-12">
                        <h6>شرح مسئله:</h6>
                        <div class="border rounded p-3 bg-light">
                            @Html.Raw(Model.Description.Replace("\n", "<br>"))
                        </div>
                    </div>
                </div>
                
                @if (!string.IsNullOrEmpty(Model.Resolution))
                {
                    <div class="row mt-3">
                        <div class="col-12">
                            <h6>راه‌حل:</h6>
                            <div class="border rounded p-3 bg-success bg-opacity-10">
                                @Html.Raw(Model.Resolution.Replace("\n", "<br>"))
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Responses -->
        <div class="card mt-3">
            <div class="card-header">
                <h3 class="card-title">
                    <i class="bi bi-chat-dots"></i> پاسخ‌ها و گفت‌وگو
                    <span class="badge bg-primary ms-2">@Model.Responses.Count</span>
                </h3>
            </div>
            <div class="card-body">
                @if (Model.Responses.Any())
                {
                    <div class="conversation-thread">
                        @foreach (var response in Model.Responses.OrderBy(r => r.CreatedAt))
                        {
                            <div class="response-item mb-4">
                                <div class="d-flex">
                                    <div class="flex-shrink-0">
                                        <div class="avatar bg-primary rounded-circle d-flex align-items-center justify-content-center" 
                                             style="width: 45px; height: 45px;">
                                            <span class="text-white fw-bold">
                                                @(response.User.FirstName?.Substring(0, 1).ToUpper())@(response.User.LastName?.Substring(0, 1).ToUpper())
                                            </span>
                                        </div>
                                    </div>
                                    <div class="flex-grow-1 ms-3">
                                        <div class="response-bubble">
                                            <div class="response-header d-flex justify-content-between align-items-center mb-2">
                                                <div>
                                                    <strong class="text-primary">@response.User.FirstName @response.User.LastName</strong>
                                                    <small class="text-muted ms-2">
                                                        <i class="bi bi-clock"></i> 
                                                        @response.CreatedAt.ToString("yyyy/MM/dd HH:mm")
                                                    </small>
                                                </div>
                                                <div>
                                                    @if (response.UserId == ViewBag.CurrentUserId)
                                                    {
                                                        <button class="btn btn-sm btn-outline-secondary" onclick="editResponse(@response.Id)">
                                                            <i class="bi bi-pencil"></i>
                                                        </button>
                                                    }
                                                </div>
                                            </div>
                                            <div class="response-content bg-light rounded p-3">
                                                @Html.Raw(response.Content.Replace("\n", "<br>"))
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="text-center text-muted py-5">
                        <i class="bi bi-chat-square-dots" style="font-size: 3rem; opacity: 0.5;"></i>
                        <h5 class="mt-3">هنوز پاسخی ثبت نشده است</h5>
                        <p>اولین نفری باشید که پاسخ می‌دهد</p>
                    </div>
                }
                
                <!-- Add Response Form -->
                @if (ViewBag.IsAgent == true || ViewBag.IsManager == true || ViewBag.IsAdmin == true)
                {
                    <div class="add-response-section mt-4">
                        <hr>
                        <div class="response-form-container">
                            <div class="d-flex">
                                <div class="flex-shrink-0">
                                    <div class="avatar bg-success rounded-circle d-flex align-items-center justify-content-center" 
                                         style="width: 45px; height: 45px;">
                                        <i class="bi bi-person text-white"></i>
                                    </div>
                                </div>
                                <div class="flex-grow-1 ms-3">
                                    <form method="post" asp-action="AddResponse" asp-route-id="@Model.Id" id="responseForm">
                                        <div class="form-group mb-3">
                                            <label for="responseContent" class="form-label fw-bold">
                                                <i class="bi bi-chat-left-text"></i> افزودن پاسخ:
                                            </label>
                                            <textarea name="content" id="responseContent" class="form-control" rows="4" 
                                                      placeholder="پاسخ خود را اینجا بنویسید..." required></textarea>
                                            <div class="form-text">
                                                <small class="text-muted">
                                                    <i class="bi bi-info-circle"></i> 
                                                    پاسخ شما برای مشتری قابل مشاهده خواهد بود
                                                </small>
                                            </div>
                                        </div>
                                        
                                        <div class="d-flex justify-content-between align-items-center flex-wrap">
                                            <div class="response-actions mb-2">
                                                <button type="submit" class="btn btn-primary">
                                                    <i class="bi bi-send"></i> ارسال پاسخ
                                                </button>
                                                <button type="button" class="btn btn-outline-secondary ms-2" onclick="clearResponse()">
                                                    <i class="bi bi-x-circle"></i> پاک کردن
                                                </button>
                                            </div>
                                            <div class="response-options mb-2">
                                                <button type="button" class="btn btn-outline-info btn-sm" data-bs-toggle="modal" data-bs-target="#cannedResponsesModal">
                                                    <i class="bi bi-bookmarks"></i> پاسخ‌های آماده
                                                </button>
                                                <button type="button" class="btn btn-outline-warning btn-sm" onclick="insertVariable('{نام_مشتری}')">
                                                    <i class="bi bi-person"></i> متغیرها
                                                </button>
                                            </div>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="alert alert-info mt-4">
                        <i class="bi bi-info-circle"></i>
                        فقط کارشناسان و مدیران می‌توانند پاسخ ارسال کنند.
                    </div>
                }
            </div>
        </div>

        <!-- Internal Notes -->
        @if (ViewBag.IsAgent == true || ViewBag.IsManager == true || ViewBag.IsAdmin == true)
        {
            <div class="card mt-3">
                <div class="card-header">
                    <h3 class="card-title">
                        <i class="bi bi-sticky"></i> یادداشت‌های داخلی
                        <span class="badge bg-warning ms-2">@Model.Notes.Count</span>
                    </h3>
                    <small class="text-muted">فقط برای تیم قابل مشاهده</small>
                </div>
                <div class="card-body">
                    @if (Model.Notes.Any())
                    {
                        <div class="notes-container">
                            @foreach (var note in Model.Notes.OrderByDescending(n => n.CreatedAt))
                            {
                                <div class="alert alert-warning border-start border-warning border-4">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <div class="note-info">
                                            <div class="d-flex align-items-center mb-2">
                                                <i class="bi bi-person-badge text-warning me-2"></i>
                                                <strong>@note.SupportAgent?.User?.FirstName @note.SupportAgent?.User?.LastName</strong>
                                                <small class="text-muted ms-2">
                                                    <i class="bi bi-clock"></i> 
                                                    @note.CreatedAt.ToString("yyyy/MM/dd HH:mm")
                                                </small>
                                            </div>
                                            <div class="note-content">
                                                @Html.Raw(note.Description.Replace("\n", "<br>"))
                                            </div>
                                        </div>
                                        @if (note.SupportAgentId == ViewBag.CurrentSupportAgentId)
                                        {
                                            <div class="note-actions">
                                                <button class="btn btn-sm btn-outline-warning" onclick="editNote(@note.Id)">
                                                    <i class="bi bi-pencil"></i>
                                                </button>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center text-muted py-3">
                            <i class="bi bi-sticky" style="font-size: 2rem; opacity: 0.5;"></i>
                            <p class="mt-2">هیچ یادداشت داخلی وجود ندارد</p>
                        </div>
                    }
                    
                    <!-- Add Note Form -->
                    <div class="add-note-section mt-4">
                        <hr>
                        <form method="post" asp-action="AddNote" asp-route-id="@Model.Id" id="noteForm">
                            <div class="form-group mb-3">
                                <label for="noteContent" class="form-label fw-bold">
                                    <i class="bi bi-sticky"></i> افزودن یادداشت داخلی:
                                </label>
                                <textarea name="content" id="noteContent" class="form-control" rows="3" 
                                          placeholder="یادداشت داخلی (فقط برای تیم قابل مشاهده است)" required></textarea>
                                <div class="form-text">
                                    <small class="text-warning">
                                        <i class="bi bi-shield-exclamation"></i> 
                                        این یادداشت فقط برای کارشناسان و مدیران قابل مشاهده است
                                    </small>
                                </div>
                            </div>
                            <div class="d-flex justify-content-between">
                                <button type="submit" class="btn btn-warning">
                                    <i class="bi bi-sticky"></i> افزودن یادداشت
                                </button>
                                <button type="button" class="btn btn-outline-secondary" onclick="clearNote()">
                                    <i class="bi bi-x-circle"></i> پاک کردن
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        }
    </div>

    <div class="col-md-4">
        <!-- Quick Actions -->
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">عملیات سریع</h3>
            </div>
            <div class="card-body">
                <div class="d-grid gap-2">
                    @if (Model.Customer != null)
                    {
                        <a href="mailto:@Model.Customer.Email" class="btn btn-outline-primary">
                            <i class="bi bi-envelope"></i> ایمیل به مشتری
                        </a>
                        @if (!string.IsNullOrEmpty(Model.Customer.PhoneNumber))
                        {
                            <a href="tel:@Model.Customer.PhoneNumber" class="btn btn-outline-success">
                                <i class="bi bi-telephone"></i> تماس با مشتری
                            </a>
                        }
                    }
                    
                    @if (ViewBag.IsAgent == true || ViewBag.IsManager == true)
                    {
                        @if (Model.TicketState.Name == "Open")
                        {
                            <button class="btn btn-success" onclick="changeTicketStatus(@Model.Id, 'Closed')">
                                <i class="bi bi-check-circle"></i> بستن تیکت
                            </button>
                        }
                        else if (Model.TicketState.Name == "Closed")
                        {
                            <button class="btn btn-warning" onclick="changeTicketStatus(@Model.Id, 'Open')">
                                <i class="bi bi-arrow-clockwise"></i> بازگشایی تیکت
                            </button>
                        }
                    }
                </div>
            </div>
        </div>

        <!-- Ticket Timeline -->
        <div class="card mt-3">
            <div class="card-header">
                <h3 class="card-title">زمان‌بندی تیکت</h3>
            </div>
            <div class="card-body">
                <div class="timeline">
                    <div class="time-label">
                        <span class="bg-primary">تاریخچه تیکت</span>
                    </div>
                    
                    @if (Model.ResolvedDate.HasValue)
                    {
                        <div>
                            <i class="bi bi-check-circle bg-success"></i>
                            <div class="timeline-item">
                                <span class="time"><i class="bi bi-clock"></i> @Model.ResolvedDate.Value.ToString("yyyy/MM/dd HH:mm")</span>
                                <h3 class="timeline-header">تیکت حل شد</h3>
                                <div class="timeline-body">
                                    تیکت به صورت کامل حل شد
                                </div>
                            </div>
                        </div>
                    }
                    
                    @foreach (var response in Model.Responses.OrderByDescending(r => r.CreatedAt).Take(3))
                    {
                        <div>
                            <i class="bi bi-chat bg-blue"></i>
                            <div class="timeline-item">
                                <span class="time"><i class="bi bi-clock"></i> @response.CreatedAt.ToString("yyyy/MM/dd HH:mm")</span>
                                <h3 class="timeline-header">پاسخ جدید</h3>
                                <div class="timeline-body">
                                    توسط @response.User.FirstName @response.User.LastName
                                </div>
                            </div>
                        </div>
                    }
                    
                    <div>
                        <i class="bi bi-plus-circle bg-green"></i>
                        <div class="timeline-item">
                            <span class="time"><i class="bi bi-clock"></i> @Model.CreatedAt.ToString("yyyy/MM/dd HH:mm")</span>
                            <h3 class="timeline-header">تیکت ایجاد شد</h3>
                            <div class="timeline-body">
                                تیکت توسط @Model.Customer.FirstName @Model.Customer.LastName ایجاد شد
                            </div>
                        </div>
                    </div>
                    
                    <div>
                        <i class="bi bi-clock bg-gray"></i>
                    </div>
                </div>
            </div>
        </div>

        <!-- Time Tracking -->
        <div class="card mt-3">
            <div class="card-header">
                <h3 class="card-title">زمان‌سنجی</h3>
            </div>
            <div class="card-body">
                <div class="row text-center">
                    <div class="col-6">
                        <div class="border-end">
                            <h4 class="text-primary">@Model.EstimatedHours</h4>
                            <small class="text-muted">ساعت تخمینی</small>
                        </div>
                    </div>
                    <div class="col-6">
                        <h4 class="text-success">@Model.ActualHours</h4>
                        <small class="text-muted">ساعت واقعی</small>
                    </div>
                </div>
                
                @if (Model.EstimatedHours > 0)
                {
                    <div class="progress mt-3">
                        <div class="progress-bar" role="progressbar" 
                             style="width: @((Model.ActualHours / Model.EstimatedHours * 100).ToString("0"))%">
                            @((Model.ActualHours / Model.EstimatedHours * 100).ToString("0"))%
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function changeTicketStatus(ticketId, newStatus) {
            if (confirm('آیا مطمئن هستید؟')) {
                // Implementation for changing ticket status
                console.log('Changing ticket', ticketId, 'to status', newStatus);
                // You can implement AJAX call here
            }
        }

        function clearResponse() {
            document.getElementById('responseContent').value = '';
        }

        function clearNote() {
            document.getElementById('noteContent').value = '';
        }

        function editResponse(responseId) {
            // Implementation for editing response
            alert('قابلیت ویرایش پاسخ در نسخه بعدی اضافه خواهد شد');
        }

        function editNote(noteId) {
            // Implementation for editing note
            alert('قابلیت ویرایش یادداشت در نسخه بعدی اضافه خواهد شد');
        }

        function loadCannedResponses() {
            // Show modal and load canned responses
            const modal = new bootstrap.Modal(document.getElementById('cannedResponsesModal'));
            modal.show();
            
            // Load canned responses via AJAX
            loadCannedResponsesData();
        }

        function loadCannedResponsesData() {
            const loading = document.getElementById('cannedResponsesLoading');
            const list = document.getElementById('cannedResponsesList');
            const empty = document.getElementById('cannedResponsesEmpty');
            
            loading.style.display = 'block';
            list.style.display = 'none';
            empty.style.display = 'none';
            
            // Simulate API call - replace with actual API endpoint
            fetch('@Url.Action("GetCannedResponses", "Knowledge")', {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(data => {
                loading.style.display = 'none';
                if (data && data.length > 0) {
                    renderCannedResponses(data);
                    list.style.display = 'block';
                } else {
                    empty.style.display = 'block';
                }
            })
            .catch(error => {
                console.error('Error loading canned responses:', error);
                loading.style.display = 'none';
                empty.style.display = 'block';
                
                // Fallback - show sample data
                const sampleData = [
                    {
                        id: 1,
                        name: 'سلام و احوالپرسی',
                        content: 'سلام {نام_مشتری} عزیز،\n\nامیدوارم حال شما خوب باشد. با تشکر از تماس شما با تیم پشتیبانی ما.',
                        description: 'پاسخ استاندارد برای شروع مکالمه',
                        tags: 'پشتیبانی,عمومی',
                        usageCount: 25
                    },
                    {
                        id: 2,
                        name: 'درخواست اطلاعات تکمیلی',
                        content: 'سلام {نام_مشتری} عزیز،\n\nبرای بررسی دقیق‌تر مشکل شما، لطفاً اطلاعات زیر را ارسال کنید:\n\n- توضیح کامل مشکل\n- تصاویر مرتبط (در صورت وجود)\n- زمان وقوع مشکل',
                        description: 'درخواست اطلاعات بیشتر از مشتری',
                        tags: 'پشتیبانی,بررسی',
                        usageCount: 18
                    },
                    {
                        id: 3,
                        name: 'تشکر و خداحافظی',
                        content: 'در صورت داشتن سوال اضافی، لطفاً با ما در تماس باشید.\n\nبا تشکر از صبر و شکیبایی شما،\n{نام_کارشناس}\nتیم پشتیبانی',
                        description: 'پایان دادن به مکالمه با تشکر',
                        tags: 'عمومی,تشکر',
                        usageCount: 32
                    },
                    {
                        id: 4,
                        name: 'راهنمای ورود به سیستم',
                        content: 'برای ورود به سیستم لطفاً مراحل زیر را دنبال کنید:\n\n1. به آدرس سایت مراجعه کنید\n2. نام کاربری و رمز عبور خود را وارد کنید\n3. روی دکمه ورود کلیک کنید\n\nدر صورت فراموشی رمز عبور، از گزینه "رمز عبور را فراموش کرده‌ام" استفاده کنید.',
                        description: 'راهنمای ورود برای کاربران',
                        tags: 'فنی,ورود,راهنمایی',
                        usageCount: 15
                    },
                    {
                        id: 5,
                        name: 'مشکل فنی در حال بررسی',
                        content: 'سلام {نام_مشتری} عزیز،\n\nمشکل فنی گزارش شده توسط شما در دست بررسی تیم فنی ما قرار گرفته است. به محض حل مشکل، نتیجه را با شما در میان خواهیم گذاشت.\n\nزمان تخمینی حل مشکل: 24 ساعت کاری\n\nبا تشکر از صبر شما',
                        description: 'اطلاع‌رسانی در مورد بررسی مشکل فنی',
                        tags: 'فنی,بررسی,انتظار',
                        usageCount: 12
                    }
                ];
                renderCannedResponses(sampleData);
                list.style.display = 'block';
                empty.style.display = 'none';
            });
        }

        function renderCannedResponses(responses) {
            const container = document.getElementById('cannedResponsesList');
            let html = '';
            
            responses.forEach(response => {
                const shortContent = response.content.length > 100 ? 
                    response.content.substring(0, 100) + '...' : response.content;
                
                const tags = response.tags ? response.tags.split(',').map(tag => 
                    `<span class="badge bg-light text-dark border me-1">${tag.trim()}</span>`
                ).join('') : '';
                
                html += `
                    <div class="canned-response-item border rounded p-3 mb-3 cursor-pointer hover-effect" 
                         data-response-id="${response.id}" 
                         data-name="${response.name.toLowerCase()}" 
                         data-tags="${response.tags || ''}"
                         onclick="selectCannedResponse(${response.id})">
                        <div class="d-flex justify-content-between align-items-start">
                            <div class="flex-grow-1">
                                <h6 class="mb-1 text-primary">${response.name}</h6>
                                ${response.description ? `<p class="text-muted small mb-2">${response.description}</p>` : ''}
                                <div class="response-preview bg-light rounded p-2 mb-2" style="font-size: 0.875em;">
                                    ${shortContent.replace(/\n/g, '<br>')}
                                </div>
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>${tags}</div>
                                    <small class="text-muted">
                                        <i class="bi bi-graph-up"></i> ${response.usageCount} استفاده
                                    </small>
                                </div>
                            </div>
                            <div class="ms-3">
                                <button class="btn btn-sm btn-outline-primary" onclick="event.stopPropagation(); previewCannedResponse(${response.id})">
                                    <i class="bi bi-eye"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                `;
            });
            
            container.innerHTML = html;
            
            // Store responses data for search and filtering
            window.allCannedResponses = responses;
        }

        function selectCannedResponse(responseId) {
            const response = window.allCannedResponses.find(r => r.id === responseId);
            if (response) {
                // Insert into response textarea
                const textarea = document.getElementById('responseContent');
                const currentContent = textarea.value.trim();
                
                if (currentContent && !confirm('آیا می‌خواهید محتوای فعلی جایگزین شود؟')) {
                    return;
                }
                
                textarea.value = response.content;
                textarea.focus();
                
                // Close modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('cannedResponsesModal'));
                modal.hide();
                
                // Show success message
                showToast(`پاسخ آماده "${response.name}" اعمال شد`, 'success');
                
                // Update usage count (optional - should be done via API)
                updateCannedResponseUsage(responseId);
            }
        }

        function previewCannedResponse(responseId) {
            const response = window.allCannedResponses.find(r => r.id === responseId);
            if (response) {
                const previewWindow = window.open('', '_blank', 'width=600,height=500');
                previewWindow.document.write(`
                    <html dir="rtl" lang="fa">
                    <head>
                        <title>پیش‌نمایش: ${response.name}</title>
                        <meta charset="utf-8">
                        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
                        <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
                    </head>
                    <body class="bg-light">
                        <div class="container mt-4">
                            <div class="card">
                                <div class="card-header bg-primary text-white">
                                    <h5 class="mb-0">
                                        <i class="bi bi-eye"></i> ${response.name}
                                    </h5>
                                </div>
                                <div class="card-body">
                                    <div class="mb-3">
                                        ${response.description ? `<p class="text-muted">${response.description}</p>` : ''}
                                    </div>
                                    <div class="border rounded p-3 bg-white">
                                        ${response.content.replace(/\n/g, '<br>')}
                                    </div>
                                    <div class="mt-3 text-center">
                                        <button class="btn btn-secondary" onclick="window.close()">بستن</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </body>
                    </html>
                `);
                previewWindow.document.close();
            }
        }

        function searchCannedResponses() {
            const searchTerm = document.getElementById('cannedResponseSearch').value.toLowerCase();
            const category = document.getElementById('cannedResponseCategory').value;
            
            if (!window.allCannedResponses) return;
            
            let filteredResponses = window.allCannedResponses.filter(response => {
                const matchesSearch = !searchTerm || 
                    response.name.toLowerCase().includes(searchTerm) ||
                    response.content.toLowerCase().includes(searchTerm) ||
                    (response.description && response.description.toLowerCase().includes(searchTerm));
                
                const matchesCategory = !category || 
                    (response.tags && response.tags.toLowerCase().includes(category.toLowerCase()));
                
                return matchesSearch && matchesCategory;
            });
            
            renderCannedResponses(filteredResponses);
        }

        function filterCannedResponses() {
            searchCannedResponses(); // Reuse search function
        }

        function updateCannedResponseUsage(responseId) {
            // This should make an API call to increment usage count
            // For now, just log it
            console.log('Updated usage for canned response:', responseId);
        }

        function insertVariableIntoResponse(variable) {
            const textarea = document.getElementById('responseContent');
            const start = textarea.selectionStart;
            const end = textarea.selectionEnd;
            const text = textarea.value;
            
            textarea.value = text.substring(0, start) + variable + text.substring(end);
            textarea.focus();
            textarea.setSelectionRange(start + variable.length, start + variable.length);
        }

        function closeVariablesModal() {
            const modal = bootstrap.Modal.getInstance(document.getElementById('variablesModal'));
            if (modal) {
                modal.hide();
            }
        }

        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.className = `alert alert-${type} position-fixed`;
            toast.style.cssText = 'top: 20px; left: 50%; transform: translateX(-50%); z-index: 9999; min-width: 300px;';
            toast.innerHTML = `
                <div class="d-flex align-items-center">
                    <i class="bi bi-${type === 'success' ? 'check-circle' : 'info-circle'} me-2"></i>
                    ${message}
                    <button type="button" class="btn-close ms-auto" onclick="this.parentElement.parentElement.remove()"></button>
                </div>
            `;
            document.body.appendChild(toast);
            
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.remove();
                }
            }, 4000);
        }

        // Real-time search for canned responses
        document.addEventListener('DOMContentLoaded', function() {
            const searchInput = document.getElementById('cannedResponseSearch');
            if (searchInput) {
                searchInput.addEventListener('input', function() {
                    clearTimeout(this.searchTimeout);
                    this.searchTimeout = setTimeout(() => {
                        searchCannedResponses();
                    }, 300);
                });
            }
        });

        // Override the original loadCannedResponses function
        function loadCannedResponses() {
            const modal = new bootstrap.Modal(document.getElementById('cannedResponsesModal'));
            modal.show();
            loadCannedResponsesData();
        }

        // Update the insertVariable function to show variables modal
        function insertVariable(variable) {
            if (variable) {
                insertVariableIntoResponse(variable);
            } else {
                const modal = new bootstrap.Modal(document.getElementById('variablesModal'));
                modal.show();
            }
        }
    </script>

    <style>
        .conversation-thread {
            max-height: 600px;
            overflow-y: auto;
        }

        .response-item {
            animation: fadeIn 0.3s ease-in;
        }

        @@keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .response-bubble {
            transition: all 0.2s ease;
        }

        .response-bubble:hover {
            transform: translateX(2px);
        }

        .avatar {
            transition: all 0.2s ease;
        }

        .avatar:hover {
            transform: scale(1.1);
        }

        .response-content {
            border-left: 4px solid #0d6efd;
            word-wrap: break-word;
        }

        .notes-container .alert {
            transition: all 0.2s ease;
        }

        .notes-container .alert:hover {
            transform: translateX(2px);
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .add-response-section, .add-note-section {
            background: linear-gradient(45deg, #f8f9fa, #ffffff);
            border-radius: 8px;
            padding: 1rem;
            margin-top: 1rem;
        }

        textarea {
            transition: border-color 0.2s ease;
        }

        textarea:focus {
            border-color: #0d6efd;
            box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
        }

        .timeline {
            position: relative;
            margin: 0 0 0 10px;
        }

        .timeline:before {
            content: '';
            position: absolute;
            top: 0;
            bottom: 0;
            left: 10px;
            width: 2px;
            background: #dee2e6;
        }

        .timeline > div {
            position: relative;
            margin-bottom: 15px;
        }

        .timeline > div > .bi {
            position: absolute;
            left: 0;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            text-align: center;
            line-height: 20px;
            font-size: 10px;
            color: white;
        }

        .timeline-item {
            margin-left: 35px;
            background: white;
            padding: 10px;
            border-radius: 5px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .timeline-header {
            font-size: 14px;
            font-weight: bold;
            margin: 0 0 5px 0;
        }

        .timeline-body {
            font-size: 12px;
            color: #666;
        }

        .time {
            font-size: 11px;
            color: #999;
        }

        .bg-blue { background-color: #007bff !important; }
        .bg-green { background-color: #28a745 !important; }
        .bg-gray { background-color: #6c757d !important; }

        /* Canned Responses Styles */
        .canned-response-item {
            transition: all 0.2s ease;
            cursor: pointer;
        }

        .canned-response-item:hover {
            border-color: #0d6efd !important;
            background-color: #f8f9fa;
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .canned-response-item.selected {
            border-color: #0d6efd !important;
            background-color: #e7f3ff;
        }

        .hover-effect {
            transition: all 0.2s ease;
        }

        .hover-effect:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .response-preview {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.4;
            max-height: 60px;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .canned-responses-container {
            scrollbar-width: thin;
            scrollbar-color: #dee2e6 transparent;
        }

        .canned-responses-container::-webkit-scrollbar {
            width: 6px;
        }

        .canned-responses-container::-webkit-scrollbar-track {
            background: transparent;
        }

        .canned-responses-container::-webkit-scrollbar-thumb {
            background: #dee2e6;
            border-radius: 3px;
        }

        .canned-responses-container::-webkit-scrollbar-thumb:hover {
            background: #adb5bd;
        }

        /* Variables Modal Styles */
        #variablesModal .btn {
            text-align: start;
            display: flex;
            align-items: center;
        }

        #variablesModal code {
            background-color: #e9ecef;
            padding: 2px 6px;
            border-radius: 4px;
            font-weight: bold;
            margin-right: 8px;
        }

        /* Badge improvements */
        .badge.border {
            border-width: 1px !important;
        }

        /* Modal improvements */
        .modal-lg {
            max-width: 900px;
        }

        /* Search input focus */
        #cannedResponseSearch:focus,
        #cannedResponseCategory:focus {
            border-color: #0d6efd;
            box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
        }

        /* Loading animation */
        @@keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        #cannedResponsesLoading {
            animation: pulse 2s infinite;
        }

        /* Toast notifications */
        .alert.position-fixed {
            animation: slideInDown 0.3s ease;
        }

        @@keyframes slideInDown {
            from {
                transform: translateX(-50%) translateY(-20px);
                opacity: 0;
            }
            to {
                transform: translateX(-50%) translateY(0);
                opacity: 1;
            }
        }

        /* Responsive improvements */
        @@media (max-width: 768px) {
            .response-actions,
            .response-options {
                width: 100%;
                margin-bottom: 0.5rem;
            }
            
            .response-actions .btn,
            .response-options .btn {
                width: 100%;
                margin-bottom: 0.25rem;
            }

            .modal-lg {
                max-width: 95%;
            }

            .canned-response-item {
                margin-bottom: 1rem !important;
            }
        }
    </style>
}

<!-- Canned Responses Modal -->
<div class="modal fade" id="cannedResponsesModal" tabindex="-1" aria-labelledby="cannedResponsesModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cannedResponsesModalLabel">
                    <i class="bi bi-bookmarks"></i> انتخاب پاسخ آماده
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Search and Filter -->
                <div class="row mb-3">
                    <div class="col-md-8">
                        <div class="input-group">
                            <input type="text" class="form-control" id="cannedResponseSearch" 
                                   placeholder="جستجو در پاسخ‌های آماده...">
                            <button class="btn btn-outline-secondary" type="button" onclick="searchCannedResponses()">
                                <i class="bi bi-search"></i>
                            </button>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <select class="form-select" id="cannedResponseCategory" onchange="filterCannedResponses()">
                            <option value="">همه دسته‌ها</option>
                            <option value="پشتیبانی">پشتیبانی</option>
                            <option value="فنی">فنی</option>
                            <option value="مالی">مالی</option>
                            <option value="عمومی">عمومی</option>
                            <option value="فروش">فروش</option>
                        </select>
                    </div>
                </div>

                <!-- Loading State -->
                <div id="cannedResponsesLoading" class="text-center py-4">
                    <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                    در حال بارگذاری پاسخ‌های آماده...
                </div>

                <!-- Canned Responses List -->
                <div id="cannedResponsesList" class="canned-responses-container" style="display: none; max-height: 400px; overflow-y: auto;">
                    <!-- Content will be loaded here -->
                </div>

                <!-- Empty State -->
                <div id="cannedResponsesEmpty" class="text-center py-4 text-muted" style="display: none;">
                    <i class="bi bi-chat-quote" style="font-size: 3rem; opacity: 0.5;"></i>
                    <h5 class="mt-3">هیچ پاسخ آماده‌ای یافت نشد</h5>
                    <p>پاسخ آماده‌ای با این مشخصات موجود نیست</p>
                    <a asp-controller="Knowledge" asp-action="CreateCannedResponse" class="btn btn-primary btn-sm" target="_blank">
                        <i class="bi bi-plus"></i> ایجاد پاسخ آماده جدید
                    </a>
                </div>
            </div>
            <div class="modal-footer">
                <div class="d-flex justify-content-between w-100">
                    <div>
                        <small class="text-muted">
                            <i class="bi bi-info-circle"></i>
                            کلیک کنید تا پاسخ آماده را انتخاب کنید
                        </small>
                    </div>
                    <div>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">بستن</button>
                        <a asp-controller="Knowledge" asp-action="CannedResponses" class="btn btn-outline-primary" target="_blank">
                            <i class="bi bi-gear"></i> مدیریت پاسخ‌ها
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Variables Helper Modal -->
<div class="modal fade" id="variablesModal" tabindex="-1" aria-labelledby="variablesModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="variablesModalLabel">
                    <i class="bi bi-code-slash"></i> متغیرهای قابل استفاده
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="text-muted mb-3">روی هر متغیر کلیک کنید تا به متن پاسخ اضافه شود:</p>
                
                <div class="d-grid gap-2">
                    <button type="button" class="btn btn-outline-primary text-start" onclick="insertVariableIntoResponse('{نام_مشتری}'); closeVariablesModal();">
                        <code>{نام_مشتری}</code> - نام کامل مشتری
                    </button>
                    <button type="button" class="btn btn-outline-primary text-start" onclick="insertVariableIntoResponse('{شماره_تیکت}'); closeVariablesModal();">
                        <code>{شماره_تیکت}</code> - شماره تیکت فعلی
                    </button>
                    <button type="button" class="btn btn-outline-primary text-start" onclick="insertVariableIntoResponse('{نام_شرکت}'); closeVariablesModal();">
                        <code>{نام_شرکت}</code> - نام شرکت مشتری
                    </button>
                    <button type="button" class="btn btn-outline-primary text-start" onclick="insertVariableIntoResponse('{تاریخ_امروز}'); closeVariablesModal();">
                        <code>{تاریخ_امروز}</code> - تاریخ جاری
                    </button>
                    <button type="button" class="btn btn-outline-primary text-start" onclick="insertVariableIntoResponse('{نام_کارشناس}'); closeVariablesModal();">
                        <code>{نام_کارشناس}</code> - نام کارشناس پاسخ‌دهنده
                    </button>
                </div>
                
                <div class="alert alert-info mt-3">
                    <small>
                        <i class="bi bi-lightbulb"></i>
                        <strong>نکته:</strong> متغیرها هنگام ارسال پاسخ به صورت خودکار با مقادیر واقعی جایگزین می‌شوند.
                    </small>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">بستن</button>
            </div>
        </div>
    </div>
</div>