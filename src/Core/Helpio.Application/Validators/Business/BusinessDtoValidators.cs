using FluentValidation;
using Helpio.Ir.Application.DTOs.Business;

namespace Helpio.Ir.Application.Validators.Business
{
    public class CreateOrderDtoValidator : AbstractValidator<CreateOrderDto>
    {
        public CreateOrderDtoValidator()
        {
            RuleFor(x => x.SubscriptionId)
                .GreaterThan(0).WithMessage("?????? ?????? ???");

            RuleFor(x => x.CustomerId)
                .GreaterThan(0).WithMessage("????? ?????? ???");

            RuleFor(x => x.TotalAmount)
                .GreaterThan(0).WithMessage("???? ?? ???? ????? ?? ??? ????")
                .LessThan(1000000).WithMessage("???? ?? ????? ??? ?? 1,000,000 ????");

            RuleFor(x => x.TaxAmount)
                .GreaterThanOrEqualTo(0).WithMessage("???? ?????? ????? ???? ????")
                .LessThanOrEqualTo(x => x.TotalAmount).WithMessage("???? ?????? ????? ??? ?? ???? ?? ????");

            RuleFor(x => x.DiscountAmount)
                .GreaterThanOrEqualTo(0).WithMessage("???? ????? ????? ???? ????")
                .LessThanOrEqualTo(x => x.TotalAmount).WithMessage("???? ????? ????? ??? ?? ???? ?? ????");

            RuleFor(x => x.Notes)
                .MaximumLength(1000).WithMessage("??????? ????? ??? ?? 1000 ??????? ????")
                .When(x => !string.IsNullOrEmpty(x.Notes));
        }
    }

    public class UpdateOrderDtoValidator : AbstractValidator<UpdateOrderDto>
    {
        public UpdateOrderDtoValidator()
        {
            RuleFor(x => x.Status)
                .IsInEnum().WithMessage("????? ????? ????? ????");

            RuleFor(x => x.ShippedDate)
                .GreaterThan(DateTime.UtcNow.AddDays(-1)).WithMessage("????? ????? ????????? ?? ????? ????")
                .When(x => x.ShippedDate.HasValue);

            RuleFor(x => x.DeliveredDate)
                .GreaterThan(DateTime.UtcNow.AddDays(-1)).WithMessage("????? ????? ????????? ?? ????? ????")
                .GreaterThanOrEqualTo(x => x.ShippedDate).WithMessage("????? ????? ???? ??? ?? ????? ????? ????")
                .When(x => x.DeliveredDate.HasValue);

            RuleFor(x => x.Notes)
                .MaximumLength(1000).WithMessage("??????? ????? ??? ?? 1000 ??????? ????")
                .When(x => !string.IsNullOrEmpty(x.Notes));
        }
    }

    public class CreateSubscriptionDtoValidator : AbstractValidator<CreateSubscriptionDto>
    {
        public CreateSubscriptionDtoValidator()
        {
            RuleFor(x => x.Name)
                .NotEmpty().WithMessage("??? ?????? ?????? ???")
                .Length(2, 100).WithMessage("??? ?????? ???? ??? 2 ?? 100 ??????? ????");

            RuleFor(x => x.Description)
                .MaximumLength(1000).WithMessage("??????? ????? ??? ?? 1000 ??????? ????")
                .When(x => !string.IsNullOrEmpty(x.Description));

            RuleFor(x => x.StartDate)
                .GreaterThanOrEqualTo(DateTime.UtcNow.Date).WithMessage("????? ???? ????? ?? ????? ????");

            RuleFor(x => x.EndDate)
                .GreaterThan(x => x.StartDate).WithMessage("????? ????? ???? ??? ?? ????? ???? ????")
                .When(x => x.EndDate.HasValue);

            RuleFor(x => x.Price)
                .GreaterThan(0).WithMessage("???? ???? ????? ?? ??? ????")
                .LessThan(100000).WithMessage("???? ????? ??? ?? 100,000 ????");

            RuleFor(x => x.Currency)
                .NotEmpty().WithMessage("???? ??? ?????? ???")
                .Length(3).WithMessage("???? ??? ???? 3 ??????? ???? (??? USD, IRR)")
                .Matches(@"^[A-Z]{3}$").WithMessage("???? ??? ???? ???? 3 ??? ???? ??????? ????");

            RuleFor(x => x.BillingCycleDays)
                .GreaterThan(0).WithMessage("???? ???????? ???? ????? ?? ??? ????")
                .LessThanOrEqualTo(365).WithMessage("???? ???????? ????? ??? ?? 365 ??? ????");

            RuleFor(x => x.OrganizationId)
                .GreaterThan(0).WithMessage("?????? ?????? ???")
                .When(x => x.OrganizationId.HasValue);

            RuleFor(x => x.Features)
                .MaximumLength(2000).WithMessage("???????? ????? ??? ?? 2000 ??????? ????")
                .When(x => !string.IsNullOrEmpty(x.Features));
        }
    }

    public class CreateTransactionDtoValidator : AbstractValidator<CreateTransactionDto>
    {
        public CreateTransactionDtoValidator()
        {
            RuleFor(x => x.PaymentId)
                .GreaterThan(0).WithMessage("?????? ?????? ???");

            RuleFor(x => x.Amount)
                .GreaterThan(0).WithMessage("???? ???? ????? ?? ??? ????")
                .LessThan(1000000).WithMessage("???? ????? ??? ?? 1,000,000 ????");

            RuleFor(x => x.Currency)
                .NotEmpty().WithMessage("???? ??? ?????? ???")
                .Length(3).WithMessage("???? ??? ???? 3 ??????? ???? (??? USD, IRR)")
                .Matches(@"^[A-Z]{3}$").WithMessage("???? ??? ???? ???? 3 ??? ???? ??????? ????");

            RuleFor(x => x.Type)
                .IsInEnum().WithMessage("??? ?????? ????? ????");

            RuleFor(x => x.Description)
                .MaximumLength(500).WithMessage("??????? ????? ??? ?? 500 ??????? ????")
                .When(x => !string.IsNullOrEmpty(x.Description));
        }
    }
}