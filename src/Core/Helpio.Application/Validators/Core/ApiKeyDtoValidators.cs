using FluentValidation;
using Helpio.Ir.Application.DTOs.Core;

namespace Helpio.Ir.Application.Validators.Core
{
    public class CreateApiKeyDtoValidator : AbstractValidator<CreateApiKeyDto>
    {
        public CreateApiKeyDtoValidator()
        {
            RuleFor(x => x.OrganizationId)
                .GreaterThan(0).WithMessage("?????? ?????? ???");

            RuleFor(x => x.KeyName)
                .NotEmpty().WithMessage("??? ???? API ?????? ???")
                .Length(2, 100).WithMessage("??? ???? API ???? ??? 2 ?? 100 ??????? ????")
                .Matches(@"^[a-zA-Z0-9\s_-]+$").WithMessage("??? ???? ??? ???????? ???? ????? ?????? ?????? ?? ???? ? ????? ????");

            RuleFor(x => x.ExpiresAt)
                .GreaterThan(DateTime.UtcNow.AddHours(1)).WithMessage("????? ????? ???? ????? ?? ???? ?? ????? ????")
                .LessThan(DateTime.UtcNow.AddYears(5)).WithMessage("????? ????? ????? ??? ?? 5 ??? ?? ????? ????")
                .When(x => x.ExpiresAt.HasValue);

            RuleFor(x => x.AllowedIPs)
                .Must(BeValidIPList).WithMessage("???? IP ??? ???? ???? ???? (????: 192.168.1.1,10.0.0.1)")
                .When(x => !string.IsNullOrEmpty(x.AllowedIPs));

            RuleFor(x => x.Permissions)
                .MaximumLength(2000).WithMessage("?????? ????? ??? ?? 2000 ??????? ????")
                .When(x => !string.IsNullOrEmpty(x.Permissions));

            RuleFor(x => x.Description)
                .MaximumLength(500).WithMessage("??????? ????? ??? ?? 500 ??????? ????")
                .When(x => !string.IsNullOrEmpty(x.Description));
        }

        private static bool BeValidIPList(string? ipList)
        {
            if (string.IsNullOrEmpty(ipList)) return true;

            var ips = ipList.Split(',', StringSplitOptions.RemoveEmptyEntries);
            foreach (var ip in ips)
            {
                var trimmedIp = ip.Trim();
                if (!System.Net.IPAddress.TryParse(trimmedIp, out _))
                {
                    return false;
                }
            }
            return true;
        }
    }

    public class UpdateApiKeyDtoValidator : AbstractValidator<UpdateApiKeyDto>
    {
        public UpdateApiKeyDtoValidator()
        {
            RuleFor(x => x.KeyName)
                .NotEmpty().WithMessage("??? ???? API ?????? ???")
                .Length(2, 100).WithMessage("??? ???? API ???? ??? 2 ?? 100 ??????? ????")
                .Matches(@"^[a-zA-Z0-9\s_-]+$").WithMessage("??? ???? ??? ???????? ???? ????? ?????? ?????? ?? ???? ? ????? ????");

            RuleFor(x => x.ExpiresAt)
                .GreaterThan(DateTime.UtcNow.AddHours(1)).WithMessage("????? ????? ???? ????? ?? ???? ?? ????? ????")
                .LessThan(DateTime.UtcNow.AddYears(5)).WithMessage("????? ????? ????? ??? ?? 5 ??? ?? ????? ????")
                .When(x => x.ExpiresAt.HasValue);

            RuleFor(x => x.AllowedIPs)
                .Must(BeValidIPList).WithMessage("???? IP ??? ???? ???? ???? (????: 192.168.1.1,10.0.0.1)")
                .When(x => !string.IsNullOrEmpty(x.AllowedIPs));

            RuleFor(x => x.Permissions)
                .MaximumLength(2000).WithMessage("?????? ????? ??? ?? 2000 ??????? ????")
                .When(x => !string.IsNullOrEmpty(x.Permissions));

            RuleFor(x => x.Description)
                .MaximumLength(500).WithMessage("??????? ????? ??? ?? 500 ??????? ????")
                .When(x => !string.IsNullOrEmpty(x.Description));

            RuleFor(x => x.IsActive)
                .NotNull().WithMessage("????? ???? ???? ?????? ???");
        }

        private static bool BeValidIPList(string? ipList)
        {
            if (string.IsNullOrEmpty(ipList)) return true;

            var ips = ipList.Split(',', StringSplitOptions.RemoveEmptyEntries);
            foreach (var ip in ips)
            {
                var trimmedIp = ip.Trim();
                if (!System.Net.IPAddress.TryParse(trimmedIp, out _))
                {
                    return false;
                }
            }
            return true;
        }
    }
}