using FluentValidation;
using Helpio.Ir.Application.DTOs.Core;

namespace Helpio.Ir.Application.Validators.Core
{
    public class CreateUserDtoValidator : AbstractValidator<CreateUserDto>
    {
        public CreateUserDtoValidator()
        {
            RuleFor(x => x.FirstName)
                .NotEmpty().WithMessage("??? ?????? ???")
                .Length(2, 50).WithMessage("??? ???? ??? 2 ?? 50 ??????? ????")
                .Matches(@"^[a-zA-Z?-?\s]+$").WithMessage("??? ??? ???????? ???? ???? ????");

            RuleFor(x => x.LastName)
                .NotEmpty().WithMessage("??? ???????? ?????? ???")
                .Length(2, 50).WithMessage("??? ???????? ???? ??? 2 ?? 50 ??????? ????")
                .Matches(@"^[a-zA-Z?-?\s]+$").WithMessage("??? ???????? ??? ???????? ???? ???? ????");

            RuleFor(x => x.Email)
                .NotEmpty().WithMessage("????? ?????? ???")
                .EmailAddress().WithMessage("???? ????? ???? ????")
                .MaximumLength(100).WithMessage("????? ????? ??? ?? 100 ??????? ????");

            RuleFor(x => x.PhoneNumber)
                .NotEmpty().WithMessage("????? ???? ?????? ???")
                .Matches(@"^(\+98|0)?9\d{9}$").WithMessage("???? ????? ???? ???? ???? (????: 09123456789)");

            RuleFor(x => x.Password)
                .NotEmpty().WithMessage("??? ???? ?????? ???")
                .MinimumLength(8).WithMessage("??? ???? ???? ????? 8 ??????? ????")
                .Matches(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,}$")
                .WithMessage("??? ???? ???? ???? ???? ????? ????? ??? ? ??????? ??? ????");
        }
    }

    public class UpdateUserDtoValidator : AbstractValidator<UpdateUserDto>
    {
        public UpdateUserDtoValidator()
        {
            RuleFor(x => x.FirstName)
                .NotEmpty().WithMessage("??? ?????? ???")
                .Length(2, 50).WithMessage("??? ???? ??? 2 ?? 50 ??????? ????")
                .Matches(@"^[a-zA-Z?-?\s]+$").WithMessage("??? ??? ???????? ???? ???? ????");

            RuleFor(x => x.LastName)
                .NotEmpty().WithMessage("??? ???????? ?????? ???")
                .Length(2, 50).WithMessage("??? ???????? ???? ??? 2 ?? 50 ??????? ????")
                .Matches(@"^[a-zA-Z?-?\s]+$").WithMessage("??? ???????? ??? ???????? ???? ???? ????");

            RuleFor(x => x.PhoneNumber)
                .NotEmpty().WithMessage("????? ???? ?????? ???")
                .Matches(@"^(\+98|0)?9\d{9}$").WithMessage("???? ????? ???? ???? ???? (????: 09123456789)");

            RuleFor(x => x.IsActive)
                .NotNull().WithMessage("????? ???? ???? ?????? ???");
        }
    }

    public class UserLoginDtoValidator : AbstractValidator<UserLoginDto>
    {
        public UserLoginDtoValidator()
        {
            RuleFor(x => x.Email)
                .NotEmpty().WithMessage("????? ?????? ???")
                .EmailAddress().WithMessage("???? ????? ???? ????");

            RuleFor(x => x.Password)
                .NotEmpty().WithMessage("??? ???? ?????? ???")
                .MinimumLength(1).WithMessage("??? ???? ?????? ???");
        }
    }
}