using FluentValidation;
using Helpio.Ir.Application.DTOs.Core;

namespace Helpio.Ir.Application.Validators.Core
{
    public class CreateCustomerDtoValidator : AbstractValidator<CreateCustomerDto>
    {
        public CreateCustomerDtoValidator()
        {
            RuleFor(x => x.FirstName)
                .NotEmpty().WithMessage("??? ?????? ???")
                .Length(2, 50).WithMessage("??? ???? ??? 2 ?? 50 ??????? ????")
                .Matches(@"^[a-zA-Z?-?\s]+$").WithMessage("??? ??? ???????? ???? ???? ????");

            RuleFor(x => x.LastName)
                .NotEmpty().WithMessage("??? ???????? ?????? ???")
                .Length(2, 50).WithMessage("??? ???????? ???? ??? 2 ?? 50 ??????? ????")
                .Matches(@"^[a-zA-Z?-?\s]+$").WithMessage("??? ???????? ??? ???????? ???? ???? ????");

            RuleFor(x => x.Email)
                .NotEmpty().WithMessage("????? ?????? ???")
                .EmailAddress().WithMessage("???? ????? ???? ????")
                .MaximumLength(100).WithMessage("????? ????? ??? ?? 100 ??????? ????");

            RuleFor(x => x.PhoneNumber)
                .NotEmpty().WithMessage("????? ???? ?????? ???")
                .Matches(@"^(\+98|0)?9\d{9}$").WithMessage("???? ????? ???? ???? ???? (????: 09123456789)");

            RuleFor(x => x.Address)
                .MaximumLength(500).WithMessage("???? ????? ??? ?? 500 ??????? ????")
                .When(x => !string.IsNullOrEmpty(x.Address));

            RuleFor(x => x.CompanyName)
                .Length(2, 100).WithMessage("??? ???? ???? ??? 2 ?? 100 ??????? ????")
                .When(x => !string.IsNullOrEmpty(x.CompanyName));
        }
    }

    public class UpdateCustomerDtoValidator : AbstractValidator<UpdateCustomerDto>
    {
        public UpdateCustomerDtoValidator()
        {
            RuleFor(x => x.FirstName)
                .NotEmpty().WithMessage("??? ?????? ???")
                .Length(2, 50).WithMessage("??? ???? ??? 2 ?? 50 ??????? ????")
                .Matches(@"^[a-zA-Z?-?\s]+$").WithMessage("??? ??? ???????? ???? ???? ????");

            RuleFor(x => x.LastName)
                .NotEmpty().WithMessage("??? ???????? ?????? ???")
                .Length(2, 50).WithMessage("??? ???????? ???? ??? 2 ?? 50 ??????? ????")
                .Matches(@"^[a-zA-Z?-?\s]+$").WithMessage("??? ???????? ??? ???????? ???? ???? ????");

            RuleFor(x => x.PhoneNumber)
                .NotEmpty().WithMessage("????? ???? ?????? ???")
                .Matches(@"^(\+98|0)?9\d{9}$").WithMessage("???? ????? ???? ???? ???? (????: 09123456789)");

            RuleFor(x => x.Address)
                .MaximumLength(500).WithMessage("???? ????? ??? ?? 500 ??????? ????")
                .When(x => !string.IsNullOrEmpty(x.Address));

            RuleFor(x => x.CompanyName)
                .Length(2, 100).WithMessage("??? ???? ???? ??? 2 ?? 100 ??????? ????")
                .When(x => !string.IsNullOrEmpty(x.CompanyName));
        }
    }
}