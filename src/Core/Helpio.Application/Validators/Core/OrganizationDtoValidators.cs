using FluentValidation;
using Helpio.Ir.Application.DTOs.Core;

namespace Helpio.Ir.Application.Validators.Core
{
    public class CreateOrganizationDtoValidator : AbstractValidator<CreateOrganizationDto>
    {
        public CreateOrganizationDtoValidator()
        {
            RuleFor(x => x.Name)
                .NotEmpty().WithMessage("??? ?????? ?????? ???")
                .Length(2, 100).WithMessage("??? ?????? ???? ??? 2 ?? 100 ??????? ????");

            RuleFor(x => x.Description)
                .MaximumLength(1000).WithMessage("??????? ????? ??? ?? 1000 ??????? ????")
                .When(x => !string.IsNullOrEmpty(x.Description));

            RuleFor(x => x.Address)
                .MaximumLength(500).WithMessage("???? ????? ??? ?? 500 ??????? ????")
                .When(x => !string.IsNullOrEmpty(x.Address));

            RuleFor(x => x.PhoneNumber)
                .Matches(@"^(\+98|0)?[\d\-\s()]+$").WithMessage("???? ????? ???? ???? ????")
                .When(x => !string.IsNullOrEmpty(x.PhoneNumber));

            RuleFor(x => x.Email)
                .EmailAddress().WithMessage("???? ????? ???? ????")
                .MaximumLength(100).WithMessage("????? ????? ??? ?? 100 ??????? ????")
                .When(x => !string.IsNullOrEmpty(x.Email));
        }
    }

    public class UpdateOrganizationDtoValidator : AbstractValidator<UpdateOrganizationDto>
    {
        public UpdateOrganizationDtoValidator()
        {
            RuleFor(x => x.Name)
                .NotEmpty().WithMessage("??? ?????? ?????? ???")
                .Length(2, 100).WithMessage("??? ?????? ???? ??? 2 ?? 100 ??????? ????");

            RuleFor(x => x.Description)
                .MaximumLength(1000).WithMessage("??????? ????? ??? ?? 1000 ??????? ????")
                .When(x => !string.IsNullOrEmpty(x.Description));

            RuleFor(x => x.Address)
                .MaximumLength(500).WithMessage("???? ????? ??? ?? 500 ??????? ????")
                .When(x => !string.IsNullOrEmpty(x.Address));

            RuleFor(x => x.PhoneNumber)
                .Matches(@"^(\+98|0)?[\d\-\s()]+$").WithMessage("???? ????? ???? ???? ????")
                .When(x => !string.IsNullOrEmpty(x.PhoneNumber));

            RuleFor(x => x.Email)
                .EmailAddress().WithMessage("???? ????? ???? ????")
                .MaximumLength(100).WithMessage("????? ????? ??? ?? 100 ??????? ????")
                .When(x => !string.IsNullOrEmpty(x.Email));

            RuleFor(x => x.IsActive)
                .NotNull().WithMessage("????? ???? ???? ?????? ???");
        }
    }
}