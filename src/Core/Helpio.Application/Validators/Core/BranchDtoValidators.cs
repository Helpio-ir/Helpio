using FluentValidation;
using Helpio.Ir.Application.DTOs.Core;

namespace Helpio.Ir.Application.Validators.Core
{
    public class CreateBranchDtoValidator : AbstractValidator<CreateBranchDto>
    {
        public CreateBranchDtoValidator()
        {
            RuleFor(x => x.Name)
                .NotEmpty().WithMessage("??? ???? ?????? ???")
                .Length(2, 100).WithMessage("??? ???? ???? ??? 2 ?? 100 ??????? ????");

            RuleFor(x => x.OrganizationId)
                .GreaterThan(0).WithMessage("?????? ?????? ???");

            RuleFor(x => x.Address)
                .MaximumLength(500).WithMessage("???? ?????? 500 ??????? ????")
                .When(x => !string.IsNullOrEmpty(x.Address));

            RuleFor(x => x.PhoneNumber)
                .Matches(@"^(\+98|0)?[\d\-\s()]+$").WithMessage("????? ???? ????? ????")
                .When(x => !string.IsNullOrEmpty(x.PhoneNumber));

            RuleFor(x => x.BranchManagerId)
                .GreaterThan(0).WithMessage("???? ???? ???? ????? ????")
                .When(x => x.BranchManagerId.HasValue);
        }
    }

    public class UpdateBranchDtoValidator : AbstractValidator<UpdateBranchDto>
    {
        public UpdateBranchDtoValidator()
        {
            RuleFor(x => x.Name)
                .NotEmpty().WithMessage("??? ???? ?????? ???")
                .Length(2, 100).WithMessage("??? ???? ???? ??? 2 ?? 100 ??????? ????");

            RuleFor(x => x.Address)
                .MaximumLength(500).WithMessage("???? ?????? 500 ??????? ????")
                .When(x => !string.IsNullOrEmpty(x.Address));

            RuleFor(x => x.PhoneNumber)
                .Matches(@"^(\+98|0)?[\d\-\s()]+$").WithMessage("????? ???? ????? ????")
                .When(x => !string.IsNullOrEmpty(x.PhoneNumber));

            RuleFor(x => x.BranchManagerId)
                .GreaterThan(0).WithMessage("???? ???? ???? ????? ????")
                .When(x => x.BranchManagerId.HasValue);

            RuleFor(x => x.IsActive)
                .NotNull().WithMessage("????? ???? ???? ?????? ???");
        }
    }
}