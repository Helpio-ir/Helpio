using FluentValidation;
using Helpio.Ir.Application.DTOs.Core;

namespace Helpio.Ir.Application.Validators.Core
{
    public class CreateTeamDtoValidator : AbstractValidator<CreateTeamDto>
    {
        public CreateTeamDtoValidator()
        {
            RuleFor(x => x.Name)
                .NotEmpty().WithMessage("??? ??? ?????? ???")
                .Length(2, 100).WithMessage("??? ??? ???? ??? 2 ?? 100 ??????? ????");

            RuleFor(x => x.BranchId)
                .GreaterThan(0).WithMessage("???? ?????? ???");

            RuleFor(x => x.Description)
                .MaximumLength(500).WithMessage("??????? ?????? 500 ??????? ????")
                .When(x => !string.IsNullOrEmpty(x.Description));

            RuleFor(x => x.TeamLeadId)
                .GreaterThan(0).WithMessage("?????? ??? ???? ????? ????")
                .When(x => x.TeamLeadId.HasValue);

            RuleFor(x => x.SupervisorId)
                .GreaterThan(0).WithMessage("???? ??? ???? ????? ????")
                .When(x => x.SupervisorId.HasValue);
        }
    }

    public class UpdateTeamDtoValidator : AbstractValidator<UpdateTeamDto>
    {
        public UpdateTeamDtoValidator()
        {
            RuleFor(x => x.Name)
                .NotEmpty().WithMessage("??? ??? ?????? ???")
                .Length(2, 100).WithMessage("??? ??? ???? ??? 2 ?? 100 ??????? ????");

            RuleFor(x => x.Description)
                .MaximumLength(500).WithMessage("??????? ?????? 500 ??????? ????")
                .When(x => !string.IsNullOrEmpty(x.Description));

            RuleFor(x => x.TeamLeadId)
                .GreaterThan(0).WithMessage("?????? ??? ???? ????? ????")
                .When(x => x.TeamLeadId.HasValue);

            RuleFor(x => x.SupervisorId)
                .GreaterThan(0).WithMessage("???? ??? ???? ????? ????")
                .When(x => x.SupervisorId.HasValue);

            RuleFor(x => x.IsActive)
                .NotNull().WithMessage("????? ???? ???? ?????? ???");
        }
    }
}