using FluentValidation;
using Helpio.Ir.Application.DTOs.Ticketing;

namespace Helpio.Ir.Application.Validators.Ticketing
{
    public class CreateTicketDtoValidator : AbstractValidator<CreateTicketDto>
    {
        public CreateTicketDtoValidator()
        {
            RuleFor(x => x.Title)
                .NotEmpty().WithMessage("????? ???? ?????? ???")
                .Length(5, 200).WithMessage("????? ???? ???? ??? 5 ?? 200 ??????? ????");

            RuleFor(x => x.Description)
                .NotEmpty().WithMessage("??????? ???? ?????? ???")
                .Length(10, 2000).WithMessage("??????? ???? ???? ??? 10 ?? 2000 ??????? ????");

            RuleFor(x => x.CustomerId)
                .GreaterThan(0).WithMessage("????? ?????? ???");

            RuleFor(x => x.TeamId)
                .GreaterThan(0).WithMessage("??? ?????? ???");

            RuleFor(x => x.TicketCategoryId)
                .GreaterThan(0).WithMessage("????????? ???? ?????? ???");

            RuleFor(x => x.Priority)
                .IsInEnum().WithMessage("?????? ???? ????? ????");

            RuleFor(x => x.DueDate)
                .GreaterThan(DateTime.UtcNow).WithMessage("????? ????? ???? ?? ????? ????")
                .When(x => x.DueDate.HasValue);

            RuleFor(x => x.EstimatedHours)
                .GreaterThanOrEqualTo(0).WithMessage("???? ?????? ????? ???? ????")
                .LessThanOrEqualTo(1000).WithMessage("???? ?????? ????? ??? ?? 1000 ???? ????");
        }
    }

    public class UpdateTicketDtoValidator : AbstractValidator<UpdateTicketDto>
    {
        public UpdateTicketDtoValidator()
        {
            RuleFor(x => x.Title)
                .NotEmpty().WithMessage("????? ???? ?????? ???")
                .Length(5, 200).WithMessage("????? ???? ???? ??? 5 ?? 200 ??????? ????");

            RuleFor(x => x.Description)
                .NotEmpty().WithMessage("??????? ???? ?????? ???")
                .Length(10, 2000).WithMessage("??????? ???? ???? ??? 10 ?? 2000 ??????? ????");

            RuleFor(x => x.SupportAgentId)
                .GreaterThan(0).WithMessage("??????? ??????? ????? ????")
                .When(x => x.SupportAgentId.HasValue);

            RuleFor(x => x.Priority)
                .IsInEnum().WithMessage("?????? ???? ????? ????");

            RuleFor(x => x.DueDate)
                .GreaterThan(DateTime.UtcNow).WithMessage("????? ????? ???? ?? ????? ????")
                .When(x => x.DueDate.HasValue);

            RuleFor(x => x.EstimatedHours)
                .GreaterThanOrEqualTo(0).WithMessage("???? ?????? ????? ???? ????")
                .LessThanOrEqualTo(1000).WithMessage("???? ?????? ????? ??? ?? 1000 ???? ????");
        }
    }

    public class AssignTicketDtoValidator : AbstractValidator<AssignTicketDto>
    {
        public AssignTicketDtoValidator()
        {
            RuleFor(x => x.TicketId)
                .GreaterThan(0).WithMessage("???? ?????? ???");

            RuleFor(x => x.SupportAgentId)
                .GreaterThan(0).WithMessage("??????? ?????? ???");
        }
    }

    public class ResolveTicketDtoValidator : AbstractValidator<ResolveTicketDto>
    {
        public ResolveTicketDtoValidator()
        {
            RuleFor(x => x.TicketId)
                .GreaterThan(0).WithMessage("???? ?????? ???");

            RuleFor(x => x.Resolution)
                .NotEmpty().WithMessage("?????? ?????? ???")
                .Length(10, 1000).WithMessage("?????? ???? ??? 10 ?? 1000 ??????? ????");

            RuleFor(x => x.ActualHours)
                .GreaterThan(0).WithMessage("???? ????? ??? ???? ????? ?? ??? ????")
                .LessThanOrEqualTo(1000).WithMessage("???? ????? ??? ????? ??? ?? 1000 ???? ????");
        }
    }
}