using FluentValidation;
using Helpio.Ir.Application.DTOs.Knowledge;

namespace Helpio.Ir.Application.Validators.Knowledge
{
    public class CreateCannedResponseDtoValidator : AbstractValidator<CreateCannedResponseDto>
    {
        public CreateCannedResponseDtoValidator()
        {
            RuleFor(x => x.OrganizationId)
                .GreaterThan(0).WithMessage("?????? ?????? ???");

            RuleFor(x => x.Name)
                .NotEmpty().WithMessage("??? ???? ????? ?????? ???")
                .Length(2, 100).WithMessage("??? ???? ????? ???? ??? 2 ?? 100 ??????? ????");

            RuleFor(x => x.Content)
                .NotEmpty().WithMessage("?????? ???? ????? ?????? ???")
                .Length(10, 5000).WithMessage("?????? ???? ????? ???? ??? 10 ?? 5000 ??????? ????");

            RuleFor(x => x.Description)
                .MaximumLength(500).WithMessage("??????? ????? ??? ?? 500 ??????? ????")
                .When(x => !string.IsNullOrEmpty(x.Description));

            RuleFor(x => x.Tags)
                .MaximumLength(200).WithMessage("???????? ????? ??? ?? 200 ??????? ????")
                .Matches(@"^[a-zA-Z?-?0-9\s,_-]*$").WithMessage("???????? ??? ???????? ???? ????? ?????? ????? ? ???? ????")
                .When(x => !string.IsNullOrEmpty(x.Tags));
        }
    }

    public class UpdateCannedResponseDtoValidator : AbstractValidator<UpdateCannedResponseDto>
    {
        public UpdateCannedResponseDtoValidator()
        {
            RuleFor(x => x.Name)
                .NotEmpty().WithMessage("??? ???? ????? ?????? ???")
                .Length(2, 100).WithMessage("??? ???? ????? ???? ??? 2 ?? 100 ??????? ????");

            RuleFor(x => x.Content)
                .NotEmpty().WithMessage("?????? ???? ????? ?????? ???")
                .Length(10, 5000).WithMessage("?????? ???? ????? ???? ??? 10 ?? 5000 ??????? ????");

            RuleFor(x => x.Description)
                .MaximumLength(500).WithMessage("??????? ????? ??? ?? 500 ??????? ????")
                .When(x => !string.IsNullOrEmpty(x.Description));

            RuleFor(x => x.Tags)
                .MaximumLength(200).WithMessage("???????? ????? ??? ?? 200 ??????? ????")
                .Matches(@"^[a-zA-Z?-?0-9\s,_-]*$").WithMessage("???????? ??? ???????? ???? ????? ?????? ????? ? ???? ????")
                .When(x => !string.IsNullOrEmpty(x.Tags));

            RuleFor(x => x.IsActive)
                .NotNull().WithMessage("????? ???? ???? ?????? ???");
        }
    }

    public class CreateArticlesDtoValidator : AbstractValidator<CreateArticlesDto>
    {
        public CreateArticlesDtoValidator()
        {
            RuleFor(x => x.OrganizationId)
                .GreaterThan(0).WithMessage("?????? ?????? ???");

            RuleFor(x => x.Name)
                .NotEmpty().WithMessage("????? ????? ?????? ???")
                .Length(5, 200).WithMessage("????? ????? ???? ??? 5 ?? 200 ??????? ????");

            RuleFor(x => x.Content)
                .NotEmpty().WithMessage("?????? ????? ?????? ???")
                .Length(50, 10000).WithMessage("?????? ????? ???? ??? 50 ?? 10000 ??????? ????");

            RuleFor(x => x.Description)
                .MaximumLength(1000).WithMessage("??????? ????? ??? ?? 1000 ??????? ????")
                .When(x => !string.IsNullOrEmpty(x.Description));

            RuleFor(x => x.Tags)
                .MaximumLength(300).WithMessage("???????? ????? ??? ?? 300 ??????? ????")
                .Matches(@"^[a-zA-Z?-?0-9\s,_-]*$").WithMessage("???????? ??? ???????? ???? ????? ?????? ????? ? ???? ????")
                .When(x => !string.IsNullOrEmpty(x.Tags));

            RuleFor(x => x.IsPublished)
                .NotNull().WithMessage("????? ?????? ?????? ???");

            RuleFor(x => x.AuthorId)
                .GreaterThan(0).WithMessage("??????? ??????? ????? ????")
                .When(x => x.AuthorId.HasValue);
        }
    }

    public class UpdateArticlesDtoValidator : AbstractValidator<UpdateArticlesDto>
    {
        public UpdateArticlesDtoValidator()
        {
            RuleFor(x => x.Name)
                .NotEmpty().WithMessage("????? ????? ?????? ???")
                .Length(5, 200).WithMessage("????? ????? ???? ??? 5 ?? 200 ??????? ????");

            RuleFor(x => x.Content)
                .NotEmpty().WithMessage("?????? ????? ?????? ???")
                .Length(50, 10000).WithMessage("?????? ????? ???? ??? 50 ?? 10000 ??????? ????");

            RuleFor(x => x.Description)
                .MaximumLength(1000).WithMessage("??????? ????? ??? ?? 1000 ??????? ????")
                .When(x => !string.IsNullOrEmpty(x.Description));

            RuleFor(x => x.Tags)
                .MaximumLength(300).WithMessage("???????? ????? ??? ?? 300 ??????? ????")
                .Matches(@"^[a-zA-Z?-?0-9\s,_-]*$").WithMessage("???????? ??? ???????? ???? ????? ?????? ????? ? ???? ????")
                .When(x => !string.IsNullOrEmpty(x.Tags));

            RuleFor(x => x.IsPublished)
                .NotNull().WithMessage("????? ?????? ?????? ???");

            RuleFor(x => x.IsActive)
                .NotNull().WithMessage("????? ???? ???? ?????? ???");
        }
    }
}